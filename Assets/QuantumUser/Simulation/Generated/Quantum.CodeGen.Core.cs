// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public enum GhostHouseState : byte {
    NotInGhostHouse,
    ReturningToEntrance,
    MovingToCenter,
    MovingToSide,
    Waiting,
    AlignVertical,
    AlignHorizontal,
    Leaving,
  }
  public enum GhostState : byte {
    Chase,
    Scared,
    Eaten,
  }
  public enum GhostTargetMode : byte {
    Blinky,
    Pinky,
    Inky,
    Clyde,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    Bomb = 1 << 0,
  }
  public static unsafe partial class FlagsExtensions {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length, "Invalid array size", values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4463;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length, "Invalid array size", values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3319;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length, "Invalid array size", values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length, "Invalid array size", values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1433;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length, "Invalid array size", values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17491;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length, "Invalid array size", values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13669;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public SByte TargetDirection;
    [FieldOffset(4)]
    public Button Bomb;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19249;
        hash = hash * 31 + TargetDirection.GetHashCode();
        hash = hash * 31 + Bomb.GetHashCode();
        return hash;
      }
    }
    static partial void GetMaxCountCodeGen(ref int maxCount) {
      maxCount = 6;
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.Bomb: return Bomb.IsDown;
        default: return false;
      }
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.Bomb: return Bomb.WasPressed;
        default: return false;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        serializer.Stream.Serialize(&p->TargetDirection);
        Button.Serialize(&p->Bomb, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Ranking {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 1;
    [FieldOffset(2)]
    private fixed Byte _alignment_padding_[2];
    [FieldOffset(1)]
    public Byte UniqueRanking;
    [FieldOffset(0)]
    public Byte SharedRanking;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14591;
        hash = hash * 31 + UniqueRanking.GetHashCode();
        hash = hash * 31 + SharedRanking.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Ranking*)ptr;
        serializer.Stream.Serialize(&p->SharedRanking);
        serializer.Stream.Serialize(&p->UniqueRanking);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 736;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<Map> Map;
    [FieldOffset(8)]
    public FP DeltaTime;
    [FieldOffset(16)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(32)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(48)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(64)]
    public RNGSession RngSession;
    [FieldOffset(80)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(120)]
    public BitSet1024 Systems;
    [FieldOffset(248)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(544)]
    public Int32 PlayerConnectedCount;
    [FieldOffset(548)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[96];
    [FieldOffset(648)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(696)]
    public EntityRef CurrentFruit;
    [FieldOffset(668)]
    public Int32 FruitsSpawned;
    [FieldOffset(712)]
    public FP GameStartingTimer;
    [FieldOffset(680)]
    public QBoolean GameStarted;
    [FieldOffset(672)]
    public Int32 GameStartTick;
    [FieldOffset(728)]
    public FP Timer;
    [FieldOffset(692)]
    public QListPtr<EntityRef> GhostHouseQueue;
    [FieldOffset(684)]
    public QBoolean GhostsInScatterMode;
    [FieldOffset(704)]
    public FP GameSpeed;
    [FieldOffset(664)]
    public Int32 CurrentMazeIndex;
    [FieldOffset(656)]
    public Byte PacmanCounter;
    [FieldOffset(676)]
    public Int32 TotalPellets;
    [FieldOffset(688)]
    public QDictionaryPtr<FPVector2, Byte> PelletData;
    [FieldOffset(720)]
    public FP PowerPelletRemainingTime;
    [FieldOffset(660)]
    public Int32 CurrentLayout;
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 16, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12473;
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerConnectedCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + CurrentFruit.GetHashCode();
        hash = hash * 31 + FruitsSpawned.GetHashCode();
        hash = hash * 31 + GameStartingTimer.GetHashCode();
        hash = hash * 31 + GameStarted.GetHashCode();
        hash = hash * 31 + GameStartTick.GetHashCode();
        hash = hash * 31 + Timer.GetHashCode();
        hash = hash * 31 + GhostHouseQueue.GetHashCode();
        hash = hash * 31 + GhostsInScatterMode.GetHashCode();
        hash = hash * 31 + GameSpeed.GetHashCode();
        hash = hash * 31 + CurrentMazeIndex.GetHashCode();
        hash = hash * 31 + PacmanCounter.GetHashCode();
        hash = hash * 31 + TotalPellets.GetHashCode();
        hash = hash * 31 + PelletData.GetHashCode();
        hash = hash * 31 + PowerPelletRemainingTime.GetHashCode();
        hash = hash * 31 + CurrentLayout.GetHashCode();
        return hash;
      }
    }
    partial void ClearPointersPartial(FrameBase f, EntityRef entity) {
      GhostHouseQueue = default;
      PelletData = default;
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRef.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
        serializer.Stream.Serialize(&p->PlayerConnectedCount);
        FixedArray.Serialize(p->input, serializer, Statics.SerializeInput);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        serializer.Stream.Serialize(&p->PacmanCounter);
        serializer.Stream.Serialize(&p->CurrentLayout);
        serializer.Stream.Serialize(&p->CurrentMazeIndex);
        serializer.Stream.Serialize(&p->FruitsSpawned);
        serializer.Stream.Serialize(&p->GameStartTick);
        serializer.Stream.Serialize(&p->TotalPellets);
        QBoolean.Serialize(&p->GameStarted, serializer);
        QBoolean.Serialize(&p->GhostsInScatterMode, serializer);
        QDictionary.Serialize(&p->PelletData, serializer, Statics.SerializeFPVector2, Statics.SerializeByte);
        QList.Serialize(&p->GhostHouseQueue, serializer, Statics.SerializeEntityRef);
        EntityRef.Serialize(&p->CurrentFruit, serializer);
        FP.Serialize(&p->GameSpeed, serializer);
        FP.Serialize(&p->GameStartingTimer, serializer);
        FP.Serialize(&p->PowerPelletRemainingTime, serializer);
        FP.Serialize(&p->Timer, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Fruit : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Graphic;
    [FieldOffset(4)]
    public Int32 Points;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10799;
        hash = hash * 31 + Graphic.GetHashCode();
        hash = hash * 31 + Points.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Fruit*)ptr;
        serializer.Stream.Serialize(&p->Graphic);
        serializer.Stream.Serialize(&p->Points);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Ghost : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    public FPVector2 TargetPosition;
    [FieldOffset(4)]
    public QBoolean ForceRandomMovement;
    [FieldOffset(2)]
    public GhostTargetMode Mode;
    [FieldOffset(1)]
    public GhostState State;
    [FieldOffset(0)]
    public GhostHouseState GhostHouseState;
    [FieldOffset(8)]
    public FP GhostHouseWaitTime;
    [FieldOffset(16)]
    public FP TimeSinceEaten;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 733;
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + ForceRandomMovement.GetHashCode();
        hash = hash * 31 + (Byte)Mode;
        hash = hash * 31 + (Byte)State;
        hash = hash * 31 + (Byte)GhostHouseState;
        hash = hash * 31 + GhostHouseWaitTime.GetHashCode();
        hash = hash * 31 + TimeSinceEaten.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Ghost*)ptr;
        serializer.Stream.Serialize((Byte*)&p->GhostHouseState);
        serializer.Stream.Serialize((Byte*)&p->State);
        serializer.Stream.Serialize((Byte*)&p->Mode);
        QBoolean.Serialize(&p->ForceRandomMovement, serializer);
        FP.Serialize(&p->GhostHouseWaitTime, serializer);
        FP.Serialize(&p->TimeSinceEaten, serializer);
        FPVector2.Serialize(&p->TargetPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GridMover : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(32)]
    public FP SpeedMultiplier;
    [FieldOffset(4)]
    public Int32 Direction;
    [FieldOffset(0)]
    public Byte TeleportFrames;
    [FieldOffset(8)]
    public QBoolean IsLocked;
    [FieldOffset(12)]
    public QBoolean IsStationary;
    [FieldOffset(16)]
    public FP DistanceMoved;
    [FieldOffset(24)]
    public FP FreezeTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19609;
        hash = hash * 31 + SpeedMultiplier.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + TeleportFrames.GetHashCode();
        hash = hash * 31 + IsLocked.GetHashCode();
        hash = hash * 31 + IsStationary.GetHashCode();
        hash = hash * 31 + DistanceMoved.GetHashCode();
        hash = hash * 31 + FreezeTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GridMover*)ptr;
        serializer.Stream.Serialize(&p->TeleportFrames);
        serializer.Stream.Serialize(&p->Direction);
        QBoolean.Serialize(&p->IsLocked, serializer);
        QBoolean.Serialize(&p->IsStationary, serializer);
        FP.Serialize(&p->DistanceMoved, serializer);
        FP.Serialize(&p->FreezeTime, serializer);
        FP.Serialize(&p->SpeedMultiplier, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PacmanPlayer : Quantum.IComponent {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(36)]
    public Ranking TotalRanking;
    [FieldOffset(32)]
    public Ranking RoundRanking;
    [FieldOffset(28)]
    public Ranking PreviousRoundRanking;
    [FieldOffset(20)]
    public Int32 TotalScore;
    [FieldOffset(16)]
    public Int32 RoundScore;
    [FieldOffset(0)]
    public Int32 Bombs;
    [FieldOffset(48)]
    public FP BombTravelTimer;
    [FieldOffset(40)]
    public FP BombTravelTime;
    [FieldOffset(112)]
    public FPVector2 BombStartPosition;
    [FieldOffset(96)]
    public FPVector2 BombEndPosition;
    [FieldOffset(12)]
    public Int32 PelletsEaten;
    [FieldOffset(8)]
    public Int32 PelletChain;
    [FieldOffset(72)]
    public FP PowerPelletTimer;
    [FieldOffset(64)]
    public FP PowerPelletFullTimer;
    [FieldOffset(4)]
    public Int32 GhostCombo;
    [FieldOffset(24)]
    public QBoolean IsDead;
    [FieldOffset(80)]
    public FP RespawnTimer;
    [FieldOffset(56)]
    public FP Invincibility;
    [FieldOffset(88)]
    public FP TemporaryInvincibility;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7607;
        hash = hash * 31 + TotalRanking.GetHashCode();
        hash = hash * 31 + RoundRanking.GetHashCode();
        hash = hash * 31 + PreviousRoundRanking.GetHashCode();
        hash = hash * 31 + TotalScore.GetHashCode();
        hash = hash * 31 + RoundScore.GetHashCode();
        hash = hash * 31 + Bombs.GetHashCode();
        hash = hash * 31 + BombTravelTimer.GetHashCode();
        hash = hash * 31 + BombTravelTime.GetHashCode();
        hash = hash * 31 + BombStartPosition.GetHashCode();
        hash = hash * 31 + BombEndPosition.GetHashCode();
        hash = hash * 31 + PelletsEaten.GetHashCode();
        hash = hash * 31 + PelletChain.GetHashCode();
        hash = hash * 31 + PowerPelletTimer.GetHashCode();
        hash = hash * 31 + PowerPelletFullTimer.GetHashCode();
        hash = hash * 31 + GhostCombo.GetHashCode();
        hash = hash * 31 + IsDead.GetHashCode();
        hash = hash * 31 + RespawnTimer.GetHashCode();
        hash = hash * 31 + Invincibility.GetHashCode();
        hash = hash * 31 + TemporaryInvincibility.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PacmanPlayer*)ptr;
        serializer.Stream.Serialize(&p->Bombs);
        serializer.Stream.Serialize(&p->GhostCombo);
        serializer.Stream.Serialize(&p->PelletChain);
        serializer.Stream.Serialize(&p->PelletsEaten);
        serializer.Stream.Serialize(&p->RoundScore);
        serializer.Stream.Serialize(&p->TotalScore);
        QBoolean.Serialize(&p->IsDead, serializer);
        Quantum.Ranking.Serialize(&p->PreviousRoundRanking, serializer);
        Quantum.Ranking.Serialize(&p->RoundRanking, serializer);
        Quantum.Ranking.Serialize(&p->TotalRanking, serializer);
        FP.Serialize(&p->BombTravelTime, serializer);
        FP.Serialize(&p->BombTravelTimer, serializer);
        FP.Serialize(&p->Invincibility, serializer);
        FP.Serialize(&p->PowerPelletFullTimer, serializer);
        FP.Serialize(&p->PowerPelletTimer, serializer);
        FP.Serialize(&p->RespawnTimer, serializer);
        FP.Serialize(&p->TemporaryInvincibility, serializer);
        FPVector2.Serialize(&p->BombEndPosition, serializer);
        FPVector2.Serialize(&p->BombStartPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLink : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef Player;
    [FieldOffset(4)]
    public QBoolean ReadyToPlay;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21391;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + ReadyToPlay.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLink*)ptr;
        PlayerRef.Serialize(&p->Player, serializer);
        QBoolean.Serialize(&p->ReadyToPlay, serializer);
    }
  }
  public unsafe partial interface ISignalOnGridMoverChangeTile : ISignal {
    void OnGridMoverChangeTile(Frame f, EntityRef entity, FPVector2 tile);
  }
  public unsafe partial interface ISignalOnCharacterEaten : ISignal {
    void OnCharacterEaten(Frame f, EntityRef entity, EntityRef other);
  }
  public unsafe partial interface ISignalOnPacmanScored : ISignal {
    void OnPacmanScored(Frame f, EntityRef entity, Int32 points);
  }
  public unsafe partial interface ISignalOnPacmanKilled : ISignal {
    void OnPacmanKilled(Frame f, EntityRef entity);
  }
  public unsafe partial interface ISignalOnPacmanRespawned : ISignal {
    void OnPacmanRespawned(Frame f, EntityRef entity);
  }
  public unsafe partial interface ISignalOnPelletRespawn : ISignal {
    void OnPelletRespawn(Frame f);
  }
  public unsafe partial interface ISignalOnPelletEat : ISignal {
    void OnPelletEat(Frame f);
  }
  public unsafe partial interface ISignalOnPowerPelletStart : ISignal {
    void OnPowerPelletStart(Frame f, EntityRef entity);
  }
  public unsafe partial interface ISignalOnPowerPelletEnd : ISignal {
    void OnPowerPelletEnd(Frame f, EntityRef entity);
  }
  public unsafe partial interface ISignalOnPlayerReady : ISignal {
    void OnPlayerReady(Frame f, PlayerRef player);
  }
  public static unsafe partial class Constants {
  }
  public unsafe partial class Frame {
    private ISignalOnGridMoverChangeTile[] _ISignalOnGridMoverChangeTileSystems;
    private ISignalOnCharacterEaten[] _ISignalOnCharacterEatenSystems;
    private ISignalOnPacmanScored[] _ISignalOnPacmanScoredSystems;
    private ISignalOnPacmanKilled[] _ISignalOnPacmanKilledSystems;
    private ISignalOnPacmanRespawned[] _ISignalOnPacmanRespawnedSystems;
    private ISignalOnPelletRespawn[] _ISignalOnPelletRespawnSystems;
    private ISignalOnPelletEat[] _ISignalOnPelletEatSystems;
    private ISignalOnPowerPelletStart[] _ISignalOnPowerPelletStartSystems;
    private ISignalOnPowerPelletEnd[] _ISignalOnPowerPelletEndSystems;
    private ISignalOnPlayerReady[] _ISignalOnPlayerReadySystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities, 256);
      _ISignalOnGridMoverChangeTileSystems = BuildSignalsArray<ISignalOnGridMoverChangeTile>();
      _ISignalOnCharacterEatenSystems = BuildSignalsArray<ISignalOnCharacterEaten>();
      _ISignalOnPacmanScoredSystems = BuildSignalsArray<ISignalOnPacmanScored>();
      _ISignalOnPacmanKilledSystems = BuildSignalsArray<ISignalOnPacmanKilled>();
      _ISignalOnPacmanRespawnedSystems = BuildSignalsArray<ISignalOnPacmanRespawned>();
      _ISignalOnPelletRespawnSystems = BuildSignalsArray<ISignalOnPelletRespawn>();
      _ISignalOnPelletEatSystems = BuildSignalsArray<ISignalOnPelletEat>();
      _ISignalOnPowerPelletStartSystems = BuildSignalsArray<ISignalOnPowerPelletStart>();
      _ISignalOnPowerPelletEndSystems = BuildSignalsArray<ISignalOnPowerPelletEnd>();
      _ISignalOnPlayerReadySystems = BuildSignalsArray<ISignalOnPlayerReady>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Fruit>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Fruit>();
      BuildSignalsArrayOnComponentAdded<Quantum.Ghost>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Ghost>();
      BuildSignalsArrayOnComponentAdded<Quantum.GridMover>();
      BuildSignalsArrayOnComponentRemoved<Quantum.GridMover>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.PacmanPlayer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PacmanPlayer>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    partial void SetPlayerInputCodeGen(PlayerRef player, Input input) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->TargetDirection = input.TargetDirection;
      i->Bomb = i->Bomb.Update(this.Number, input.Bomb);
    }
    public Input* GetPlayerInput(PlayerRef player) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    partial void GetPlayerLastConnectionStateCodeGen(ref BitSetRef bitSet) {
      bitSet = new(_globals->PlayerLastConnectionState.Bits, _globals->PlayerLastConnectionState.Length);
    }
    partial void ResetPhysicsCodeGen() {
      if (Context.Physics2D != null && Physics2D.Map != null && Physics2D.Map.Guid.IsDynamic) Physics2D.ResetMap();
      Physics2D.Init(_globals->PhysicsState2D.MapStaticCollidersState.TrackedMap);
      if (Context.Physics3D != null && Physics3D.Map != null && Physics3D.Map.Guid.IsDynamic) Physics3D.ResetMap();
      Physics3D.Init(_globals->PhysicsState3D.MapStaticCollidersState.TrackedMap);
    }
    public unsafe partial struct FrameSignals {
      public void OnGridMoverChangeTile(EntityRef entity, FPVector2 tile) {
        var array = _f._ISignalOnGridMoverChangeTileSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnGridMoverChangeTile(_f, entity, tile);
          }
        }
      }
      public void OnCharacterEaten(EntityRef entity, EntityRef other) {
        var array = _f._ISignalOnCharacterEatenSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnCharacterEaten(_f, entity, other);
          }
        }
      }
      public void OnPacmanScored(EntityRef entity, Int32 points) {
        var array = _f._ISignalOnPacmanScoredSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPacmanScored(_f, entity, points);
          }
        }
      }
      public void OnPacmanKilled(EntityRef entity) {
        var array = _f._ISignalOnPacmanKilledSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPacmanKilled(_f, entity);
          }
        }
      }
      public void OnPacmanRespawned(EntityRef entity) {
        var array = _f._ISignalOnPacmanRespawnedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPacmanRespawned(_f, entity);
          }
        }
      }
      public void OnPelletRespawn() {
        var array = _f._ISignalOnPelletRespawnSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPelletRespawn(_f);
          }
        }
      }
      public void OnPelletEat() {
        var array = _f._ISignalOnPelletEatSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPelletEat(_f);
          }
        }
      }
      public void OnPowerPelletStart(EntityRef entity) {
        var array = _f._ISignalOnPowerPelletStartSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPowerPelletStart(_f, entity);
          }
        }
      }
      public void OnPowerPelletEnd(EntityRef entity) {
        var array = _f._ISignalOnPowerPelletEndSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPowerPelletEnd(_f, entity);
          }
        }
      }
      public void OnPlayerReady(PlayerRef player) {
        var array = _f._ISignalOnPlayerReadySystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPlayerReady(_f, player);
          }
        }
      }
    }
  }
  public unsafe partial class Statics {
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeFPVector2;
    public static FrameSerializer.Delegate SerializeByte;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitStaticDelegatesGen() {
      SerializeEntityRef = EntityRef.Serialize;
      SerializeFPVector2 = FPVector2.Serialize;
      SerializeByte = (v, s) => {{ s.Stream.Serialize((Byte*)v); }};
      SerializeInput = Quantum.Input.Serialize;
    }
    static partial void RegisterSimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(AssetGuid), AssetGuid.SIZE);
      typeRegistry.Register(typeof(AssetRef), AssetRef.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      typeRegistry.Register(typeof(Button), Button.SIZE);
      typeRegistry.Register(typeof(CallbackFlags), 4);
      typeRegistry.Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      typeRegistry.Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      typeRegistry.Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      typeRegistry.Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      typeRegistry.Register(typeof(ComponentTypeRef), ComponentTypeRef.SIZE);
      typeRegistry.Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      typeRegistry.Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      typeRegistry.Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      typeRegistry.Register(typeof(EntityRef), EntityRef.SIZE);
      typeRegistry.Register(typeof(FP), FP.SIZE);
      typeRegistry.Register(typeof(FPBounds2), FPBounds2.SIZE);
      typeRegistry.Register(typeof(FPBounds3), FPBounds3.SIZE);
      typeRegistry.Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      typeRegistry.Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      typeRegistry.Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      typeRegistry.Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      typeRegistry.Register(typeof(FPVector2), FPVector2.SIZE);
      typeRegistry.Register(typeof(FPVector3), FPVector3.SIZE);
      typeRegistry.Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      typeRegistry.Register(typeof(FrameTimer), FrameTimer.SIZE);
      typeRegistry.Register(typeof(Quantum.Fruit), Quantum.Fruit.SIZE);
      typeRegistry.Register(typeof(Quantum.Ghost), Quantum.Ghost.SIZE);
      typeRegistry.Register(typeof(Quantum.GhostHouseState), 1);
      typeRegistry.Register(typeof(Quantum.GhostState), 1);
      typeRegistry.Register(typeof(Quantum.GhostTargetMode), 1);
      typeRegistry.Register(typeof(Quantum.GridMover), Quantum.GridMover.SIZE);
      typeRegistry.Register(typeof(HingeJoint), HingeJoint.SIZE);
      typeRegistry.Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      typeRegistry.Register(typeof(Hit), Hit.SIZE);
      typeRegistry.Register(typeof(Hit3D), Hit3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      typeRegistry.Register(typeof(Quantum.InputButtons), 4);
      typeRegistry.Register(typeof(Joint), Joint.SIZE);
      typeRegistry.Register(typeof(Joint3D), Joint3D.SIZE);
      typeRegistry.Register(typeof(LayerMask), LayerMask.SIZE);
      typeRegistry.Register(typeof(MapEntityId), MapEntityId.SIZE);
      typeRegistry.Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      typeRegistry.Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      typeRegistry.Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      typeRegistry.Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      typeRegistry.Register(typeof(NullableFP), NullableFP.SIZE);
      typeRegistry.Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      typeRegistry.Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      typeRegistry.Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      typeRegistry.Register(typeof(Quantum.PacmanPlayer), Quantum.PacmanPlayer.SIZE);
      typeRegistry.Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      typeRegistry.Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks2D), PhysicsCallbacks2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks3D), PhysicsCallbacks3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      typeRegistry.Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints2D), PhysicsJoints2D.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints3D), PhysicsJoints3D.SIZE);
      typeRegistry.Register(typeof(PhysicsQueryRef), PhysicsQueryRef.SIZE);
      typeRegistry.Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerLink), Quantum.PlayerLink.SIZE);
      typeRegistry.Register(typeof(PlayerRef), PlayerRef.SIZE);
      typeRegistry.Register(typeof(Ptr), Ptr.SIZE);
      typeRegistry.Register(typeof(QBoolean), QBoolean.SIZE);
      typeRegistry.Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      typeRegistry.Register(typeof(QueryOptions), 2);
      typeRegistry.Register(typeof(RNGSession), RNGSession.SIZE);
      typeRegistry.Register(typeof(Quantum.Ranking), Quantum.Ranking.SIZE);
      typeRegistry.Register(typeof(Shape2D), Shape2D.SIZE);
      typeRegistry.Register(typeof(Shape3D), Shape3D.SIZE);
      typeRegistry.Register(typeof(SpringJoint), SpringJoint.SIZE);
      typeRegistry.Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      typeRegistry.Register(typeof(Transform2D), Transform2D.SIZE);
      typeRegistry.Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      typeRegistry.Register(typeof(Transform3D), Transform3D.SIZE);
      typeRegistry.Register(typeof(View), View.SIZE);
      typeRegistry.Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
    static partial void InitComponentTypeIdGen() {
      ComponentTypeId.Reset(ComponentTypeId.BuiltInComponentCount + 5)
        .AddBuiltInComponents()
        .Add<Quantum.Fruit>(Quantum.Fruit.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Ghost>(Quantum.Ghost.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.GridMover>(Quantum.GridMover.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PacmanPlayer>(Quantum.PacmanPlayer.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerLink>(Quantum.PlayerLink.Serialize, null, null, ComponentFlags.None)
        .Finish();
    }
    [Preserve()]
    public static void EnsureNotStrippedGen() {
      FramePrinter.EnsureNotStripped();
      FramePrinter.EnsurePrimitiveNotStripped<CallbackFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GhostHouseState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GhostState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GhostTargetMode>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<QueryOptions>();
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
