// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 26;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventFruitEaten.ID: result = typeof(EventFruitEaten); return;
          case EventGameStarting.ID: result = typeof(EventGameStarting); return;
          case EventGameStart.ID: result = typeof(EventGameStart); return;
          case EventGameEnd.ID: result = typeof(EventGameEnd); return;
          case EventGameStateChanged.ID: result = typeof(EventGameStateChanged); return;
          case EventPlayerJoined.ID: result = typeof(EventPlayerJoined); return;
          case EventPlayerLeft.ID: result = typeof(EventPlayerLeft); return;
          case EventTimerSecondPassed.ID: result = typeof(EventTimerSecondPassed); return;
          case EventGhostStateChanged.ID: result = typeof(EventGhostStateChanged); return;
          case EventGhostHouseStateChanged.ID: result = typeof(EventGhostHouseStateChanged); return;
          case EventGridMoverChangeTile.ID: result = typeof(EventGridMoverChangeTile); return;
          case EventGridMoverReachedCenterOfTile.ID: result = typeof(EventGridMoverReachedCenterOfTile); return;
          case EventTeleportEvent.ID: result = typeof(EventTeleportEvent); return;
          case EventCharacterEaten.ID: result = typeof(EventCharacterEaten); return;
          case EventPacmanKilled.ID: result = typeof(EventPacmanKilled); return;
          case EventPacmanScored.ID: result = typeof(EventPacmanScored); return;
          case EventPacmanRespawned.ID: result = typeof(EventPacmanRespawned); return;
          case EventPacmanVulnerable.ID: result = typeof(EventPacmanVulnerable); return;
          case EventPacmanCollectBomb.ID: result = typeof(EventPacmanCollectBomb); return;
          case EventPacmanUseBomb.ID: result = typeof(EventPacmanUseBomb); return;
          case EventPacmanLandBombJump.ID: result = typeof(EventPacmanLandBombJump); return;
          case EventPelletRespawn.ID: result = typeof(EventPelletRespawn); return;
          case EventPelletEat.ID: result = typeof(EventPelletEat); return;
          case EventPowerPelletEat.ID: result = typeof(EventPowerPelletEat); return;
          case EventPowerPelletEnd.ID: result = typeof(EventPowerPelletEnd); return;
          default: break;
        }
      }
      public EventFruitEaten FruitEaten(EntityRef Pacman, EntityRef Fruit, Int32 Points) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventFruitEaten>(EventFruitEaten.ID);
        ev.Pacman = Pacman;
        ev.Fruit = Fruit;
        ev.Points = Points;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameStarting GameStarting(Int32 MazeIndex) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameStarting>(EventGameStarting.ID);
        ev.MazeIndex = MazeIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameStart GameStart() {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameStart>(EventGameStart.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameEnd GameEnd() {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameEnd>(EventGameEnd.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameStateChanged GameStateChanged(GameState OldState, GameState NewState) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameStateChanged>(EventGameStateChanged.ID);
        ev.OldState = OldState;
        ev.NewState = NewState;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlayerJoined PlayerJoined(PlayerRef Player) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPlayerJoined>(EventPlayerJoined.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlayerLeft PlayerLeft(PlayerRef Player) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPlayerLeft>(EventPlayerLeft.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventTimerSecondPassed TimerSecondPassed(Int32 SecondsRemaining) {
        var ev = _f.Context.AcquireEvent<EventTimerSecondPassed>(EventTimerSecondPassed.ID);
        ev.SecondsRemaining = SecondsRemaining;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGhostStateChanged GhostStateChanged(EntityRef Entity, GhostState State) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGhostStateChanged>(EventGhostStateChanged.ID);
        ev.Entity = Entity;
        ev.State = State;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGhostHouseStateChanged GhostHouseStateChanged(EntityRef Entity, GhostHouseState State) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGhostHouseStateChanged>(EventGhostHouseStateChanged.ID);
        ev.Entity = Entity;
        ev.State = State;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGridMoverChangeTile GridMoverChangeTile(EntityRef Entity, FPVector2 Tile) {
        var ev = _f.Context.AcquireEvent<EventGridMoverChangeTile>(EventGridMoverChangeTile.ID);
        ev.Entity = Entity;
        ev.Tile = Tile;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGridMoverReachedCenterOfTile GridMoverReachedCenterOfTile(EntityRef Entity, FPVector2 Tile) {
        var ev = _f.Context.AcquireEvent<EventGridMoverReachedCenterOfTile>(EventGridMoverReachedCenterOfTile.ID);
        ev.Entity = Entity;
        ev.Tile = Tile;
        _f.AddEvent(ev);
        return ev;
      }
      public EventTeleportEvent TeleportEvent(EntityRef Entity, QBoolean IsTeleporting) {
        var ev = _f.Context.AcquireEvent<EventTeleportEvent>(EventTeleportEvent.ID);
        ev.Entity = Entity;
        ev.IsTeleporting = IsTeleporting;
        _f.AddEvent(ev);
        return ev;
      }
      public EventCharacterEaten CharacterEaten(EntityRef Pacman, EntityRef Other, Int32 Combo, Int32 GainedPoints) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventCharacterEaten>(EventCharacterEaten.ID);
        ev.Pacman = Pacman;
        ev.Other = Other;
        ev.Combo = Combo;
        ev.GainedPoints = GainedPoints;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPacmanKilled PacmanKilled(EntityRef Entity, FP RespawnInSeconds) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPacmanKilled>(EventPacmanKilled.ID);
        ev.Entity = Entity;
        ev.RespawnInSeconds = RespawnInSeconds;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPacmanScored PacmanScored(EntityRef Entity, PacmanPlayer Pacman, Int32 GainedPoints, Int32 TotalPoints) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPacmanScored>(EventPacmanScored.ID);
        ev.Entity = Entity;
        ev.Pacman = Pacman;
        ev.GainedPoints = GainedPoints;
        ev.TotalPoints = TotalPoints;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPacmanRespawned PacmanRespawned(EntityRef Entity) {
        var ev = _f.Context.AcquireEvent<EventPacmanRespawned>(EventPacmanRespawned.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPacmanVulnerable PacmanVulnerable(EntityRef Entity) {
        var ev = _f.Context.AcquireEvent<EventPacmanVulnerable>(EventPacmanVulnerable.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPacmanCollectBomb PacmanCollectBomb(EntityRef Entity, Int32 NewCount) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPacmanCollectBomb>(EventPacmanCollectBomb.ID);
        ev.Entity = Entity;
        ev.NewCount = NewCount;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPacmanUseBomb PacmanUseBomb(EntityRef Entity, FPVector2 Target) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPacmanUseBomb>(EventPacmanUseBomb.ID);
        ev.Entity = Entity;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPacmanLandBombJump PacmanLandBombJump(EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPacmanLandBombJump>(EventPacmanLandBombJump.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPelletRespawn PelletRespawn(Int32 Configuration, QBoolean PlayEffect, QBoolean WipeFromLeft) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPelletRespawn>(EventPelletRespawn.ID);
        ev.Configuration = Configuration;
        ev.PlayEffect = PlayEffect;
        ev.WipeFromLeft = WipeFromLeft;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPelletEat PelletEat(EntityRef Entity, FPVector2 Tile, Int32 Chain) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPelletEat>(EventPelletEat.ID);
        ev.Entity = Entity;
        ev.Tile = Tile;
        ev.Chain = Chain;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPowerPelletEat PowerPelletEat(EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPowerPelletEat>(EventPowerPelletEat.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPowerPelletEnd PowerPelletEnd(EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPowerPelletEnd>(EventPowerPelletEnd.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventFruitEaten : EventBase {
    public new const Int32 ID = 1;
    public EntityRef Pacman;
    public EntityRef Fruit;
    public Int32 Points;
    protected EventFruitEaten(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventFruitEaten() : 
        base(1, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + Pacman.GetHashCode();
        hash = hash * 31 + Fruit.GetHashCode();
        hash = hash * 31 + Points.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGameStarting : EventBase {
    public new const Int32 ID = 2;
    public Int32 MazeIndex;
    protected EventGameStarting(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameStarting() : 
        base(2, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + MazeIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGameStart : EventBase {
    public new const Int32 ID = 3;
    protected EventGameStart(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameStart() : 
        base(3, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        return hash;
      }
    }
  }
  public unsafe partial class EventGameEnd : EventBase {
    public new const Int32 ID = 4;
    protected EventGameEnd(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameEnd() : 
        base(4, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        return hash;
      }
    }
  }
  public unsafe partial class EventGameStateChanged : EventBase {
    public new const Int32 ID = 5;
    public GameState OldState;
    public GameState NewState;
    protected EventGameStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameStateChanged() : 
        base(5, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + OldState.GetHashCode();
        hash = hash * 31 + NewState.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayerJoined : EventBase {
    public new const Int32 ID = 6;
    public PlayerRef Player;
    protected EventPlayerJoined(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerJoined() : 
        base(6, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayerLeft : EventBase {
    public new const Int32 ID = 7;
    public PlayerRef Player;
    protected EventPlayerLeft(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerLeft() : 
        base(7, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventTimerSecondPassed : EventBase {
    public new const Int32 ID = 8;
    public Int32 SecondsRemaining;
    protected EventTimerSecondPassed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventTimerSecondPassed() : 
        base(8, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + SecondsRemaining.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGhostStateChanged : EventBase {
    public new const Int32 ID = 9;
    public EntityRef Entity;
    public GhostState State;
    protected EventGhostStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGhostStateChanged() : 
        base(9, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + State.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGhostHouseStateChanged : EventBase {
    public new const Int32 ID = 10;
    public EntityRef Entity;
    public GhostHouseState State;
    protected EventGhostHouseStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGhostHouseStateChanged() : 
        base(10, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + State.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGridMoverChangeTile : EventBase {
    public new const Int32 ID = 11;
    public EntityRef Entity;
    public FPVector2 Tile;
    protected EventGridMoverChangeTile(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGridMoverChangeTile() : 
        base(11, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 83;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Tile.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGridMoverReachedCenterOfTile : EventBase {
    public new const Int32 ID = 12;
    public EntityRef Entity;
    public FPVector2 Tile;
    protected EventGridMoverReachedCenterOfTile(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGridMoverReachedCenterOfTile() : 
        base(12, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 89;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Tile.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventTeleportEvent : EventBase {
    public new const Int32 ID = 13;
    public EntityRef Entity;
    public QBoolean IsTeleporting;
    protected EventTeleportEvent(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventTeleportEvent() : 
        base(13, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 97;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + IsTeleporting.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCharacterEaten : EventBase {
    public new const Int32 ID = 14;
    public EntityRef Pacman;
    public EntityRef Other;
    public Int32 Combo;
    public Int32 GainedPoints;
    protected EventCharacterEaten(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventCharacterEaten() : 
        base(14, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 101;
        hash = hash * 31 + Pacman.GetHashCode();
        hash = hash * 31 + Other.GetHashCode();
        hash = hash * 31 + Combo.GetHashCode();
        hash = hash * 31 + GainedPoints.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPacmanKilled : EventBase {
    public new const Int32 ID = 15;
    public EntityRef Entity;
    public FP RespawnInSeconds;
    protected EventPacmanKilled(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPacmanKilled() : 
        base(15, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 103;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + RespawnInSeconds.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPacmanScored : EventBase {
    public new const Int32 ID = 16;
    public EntityRef Entity;
    public PacmanPlayer Pacman;
    public Int32 GainedPoints;
    public Int32 TotalPoints;
    protected EventPacmanScored(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPacmanScored() : 
        base(16, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 107;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Pacman.GetHashCode();
        hash = hash * 31 + GainedPoints.GetHashCode();
        hash = hash * 31 + TotalPoints.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPacmanRespawned : EventBase {
    public new const Int32 ID = 17;
    public EntityRef Entity;
    protected EventPacmanRespawned(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPacmanRespawned() : 
        base(17, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 109;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPacmanVulnerable : EventBase {
    public new const Int32 ID = 18;
    public EntityRef Entity;
    protected EventPacmanVulnerable(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPacmanVulnerable() : 
        base(18, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 113;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPacmanCollectBomb : EventBase {
    public new const Int32 ID = 19;
    public EntityRef Entity;
    public Int32 NewCount;
    protected EventPacmanCollectBomb(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPacmanCollectBomb() : 
        base(19, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 127;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + NewCount.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPacmanUseBomb : EventBase {
    public new const Int32 ID = 20;
    public EntityRef Entity;
    public FPVector2 Target;
    protected EventPacmanUseBomb(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPacmanUseBomb() : 
        base(20, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 131;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPacmanLandBombJump : EventBase {
    public new const Int32 ID = 21;
    public EntityRef Entity;
    protected EventPacmanLandBombJump(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPacmanLandBombJump() : 
        base(21, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 137;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPelletRespawn : EventBase {
    public new const Int32 ID = 22;
    public Int32 Configuration;
    public QBoolean PlayEffect;
    public QBoolean WipeFromLeft;
    protected EventPelletRespawn(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPelletRespawn() : 
        base(22, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 139;
        hash = hash * 31 + Configuration.GetHashCode();
        hash = hash * 31 + PlayEffect.GetHashCode();
        hash = hash * 31 + WipeFromLeft.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPelletEat : EventBase {
    public new const Int32 ID = 23;
    public EntityRef Entity;
    public FPVector2 Tile;
    public Int32 Chain;
    protected EventPelletEat(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPelletEat() : 
        base(23, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 149;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Tile.GetHashCode();
        hash = hash * 31 + Chain.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPowerPelletEat : EventBase {
    public new const Int32 ID = 24;
    public EntityRef Entity;
    protected EventPowerPelletEat(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPowerPelletEat() : 
        base(24, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 151;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPowerPelletEnd : EventBase {
    public new const Int32 ID = 25;
    public EntityRef Entity;
    protected EventPowerPelletEnd(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPowerPelletEnd() : 
        base(25, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 157;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
